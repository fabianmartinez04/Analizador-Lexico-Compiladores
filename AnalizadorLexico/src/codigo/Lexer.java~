/* The following code was generated by JFlex 1.4.3 on 4/23/21, 5:00 PM */

package codigo;
import static codigo.TipoToken.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/23/21, 5:00 PM from the specification file
 * <tt>C:/Users/liset/OneDrive/Documentos/Ingeniería en Computación/Computación V Semestre/Compiladores e intérpretes/Proyectos/Scanner/AnalizadorLexico/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\62\2\0\1\10\22\0\1\10\1\17\1\63\2\0"+
    "\1\23\1\20\1\26\1\11\1\11\1\21\1\12\1\11\1\13\1\24"+
    "\1\22\1\3\1\7\6\7\2\2\1\11\1\11\1\16\1\14\1\15"+
    "\1\11\1\25\1\31\5\5\23\1\1\32\1\11\1\0\1\11\1\23"+
    "\1\1\1\0\1\27\1\40\1\44\1\51\1\42\1\52\1\55\1\46"+
    "\1\50\1\1\1\43\1\53\1\54\1\47\1\37\1\60\1\1\1\41"+
    "\1\45\1\36\1\35\1\61\1\56\1\4\1\57\1\30\1\11\1\6"+
    "\1\11\1\11\42\0\1\25\11\0\1\25\23\0\1\25\1\33\6\0"+
    "\1\25\11\0\1\25\12\0\1\25\12\0\1\25\2\0\1\25\6\0"+
    "\1\25\15\0\1\34\u245d\0\1\25\udaa2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\2\4\1\5\1\6\11\5\2\1"+
    "\17\3\1\2\1\3\1\1\1\3\1\0\1\1\1\4"+
    "\1\0\2\1\1\7\1\4\1\1\1\5\1\1\1\0"+
    "\1\6\2\1\1\10\1\1\1\0\20\3\2\11\6\3"+
    "\2\0\1\10\2\1\2\0\2\1\1\4\1\12\1\0"+
    "\3\13\1\7\1\0\1\10\3\1\2\0\31\3\3\0"+
    "\2\1\1\0\1\13\1\14\4\0\17\3\2\0\1\15"+
    "\1\0\2\15\1\0\1\15\1\0\1\10\3\0\7\3"+
    "\7\0\2\3\31\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\64"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618"+
    "\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8"+
    "\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u06e8\0\u0924"+
    "\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u09f4\0\u0a28\0\u0a5c\0\u0a90"+
    "\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30"+
    "\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\150"+
    "\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0680"+
    "\0\u0f3c\0\64\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074"+
    "\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214"+
    "\0\u09c0\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380"+
    "\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520"+
    "\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0"+
    "\0\u16f4\0\u1728\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860"+
    "\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u1998\0\64\0\u19cc"+
    "\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c"+
    "\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c"+
    "\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10\0\u1e10\0\u1e44\0\u1e78"+
    "\0\u1eac\0\u1ee0\0\u1f14\0\u1a00\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4"+
    "\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184"+
    "\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u2324"+
    "\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4"+
    "\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc\0\u2630\0\u2664"+
    "\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0\0\u2804";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\3\1\6\1\4\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\13\1\16"+
    "\1\13\1\17\1\20\1\10\1\21\1\22\1\23\3\3"+
    "\2\2\1\24\1\25\1\3\1\26\1\27\1\30\1\3"+
    "\1\31\1\32\2\3\1\33\1\34\1\35\1\36\1\3"+
    "\1\37\1\40\2\3\1\41\1\7\1\42\65\0\1\3"+
    "\2\43\2\3\1\0\1\43\10\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\45\3\3\2\0\25\3\2\0\1\46"+
    "\1\47\2\50\2\47\1\46\1\50\10\46\1\47\1\46"+
    "\2\47\1\51\2\47\1\52\3\47\2\46\25\47\1\0"+
    "\2\46\1\47\2\50\1\53\1\47\1\46\1\54\10\46"+
    "\1\47\1\46\2\47\1\51\2\47\1\52\3\47\2\46"+
    "\25\47\1\0\1\46\6\0\1\10\5\0\1\10\57\0"+
    "\1\7\51\0\1\7\13\0\1\10\1\0\1\10\51\0"+
    "\2\55\3\0\1\55\3\0\3\10\62\0\1\10\63\0"+
    "\1\10\1\13\62\0\1\10\1\0\1\13\46\0\1\56"+
    "\2\44\2\56\1\0\1\44\4\0\1\10\3\0\1\57"+
    "\1\0\2\44\1\0\2\44\1\60\3\56\2\0\25\56"+
    "\3\0\1\56\2\44\2\56\1\0\1\44\4\0\1\10"+
    "\3\0\1\44\1\61\1\62\1\44\1\0\2\44\1\60"+
    "\3\56\2\0\25\56\3\0\1\56\2\44\2\56\1\0"+
    "\1\44\4\0\1\10\3\0\1\44\1\0\2\44\1\0"+
    "\2\44\1\60\3\56\2\0\25\56\3\0\1\56\2\44"+
    "\2\56\1\0\1\44\10\0\1\44\1\0\2\44\1\0"+
    "\2\44\1\60\3\56\2\0\25\56\3\0\1\63\2\64"+
    "\2\63\1\0\1\64\10\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\66\3\63\2\0\25\63\3\0\1\3"+
    "\2\43\2\3\1\0\1\43\3\0\1\67\4\0\1\44"+
    "\1\0\2\44\1\0\2\44\1\45\3\3\2\0\1\70"+
    "\24\3\3\0\1\3\2\43\2\3\1\0\1\43\10\0"+
    "\1\44\1\0\2\44\1\0\2\44\1\45\3\3\2\0"+
    "\12\3\1\71\12\3\3\0\1\3\2\43\2\3\1\0"+
    "\1\43\10\0\1\44\1\0\2\44\1\0\2\44\1\45"+
    "\3\3\2\0\22\3\1\72\2\3\3\0\1\3\2\43"+
    "\2\3\1\0\1\43\10\0\1\44\1\0\2\44\1\0"+
    "\2\44\1\45\3\3\2\0\4\3\1\73\20\3\3\0"+
    "\1\3\2\43\2\3\1\0\1\43\10\0\1\44\1\0"+
    "\2\44\1\0\2\44\1\45\3\3\2\0\5\3\1\74"+
    "\17\3\3\0\1\3\2\43\1\75\1\3\1\0\1\43"+
    "\10\0\1\44\1\0\2\44\1\0\2\44\1\45\3\3"+
    "\2\0\12\3\1\76\3\3\1\77\6\3\3\0\1\3"+
    "\2\43\2\3\1\0\1\43\10\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\100\3\3\2\0\2\3\1\101\6\3"+
    "\1\102\13\3\3\0\1\3\2\43\2\3\1\0\1\43"+
    "\10\0\1\44\1\0\2\44\1\0\2\44\1\45\3\3"+
    "\2\0\1\3\1\103\7\3\1\104\1\3\1\105\5\3"+
    "\1\106\3\3\3\0\1\3\2\43\2\3\1\0\1\43"+
    "\10\0\1\44\1\0\2\44\1\0\2\44\1\45\3\3"+
    "\2\0\12\3\1\107\2\3\1\110\7\3\3\0\1\3"+
    "\2\43\2\3\1\0\1\43\10\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\45\3\3\2\0\2\3\1\111\2\3"+
    "\1\112\17\3\3\0\1\3\2\43\2\3\1\0\1\43"+
    "\10\0\1\44\1\0\2\44\1\0\2\44\1\45\3\3"+
    "\2\0\2\3\1\113\13\3\1\114\6\3\3\0\1\3"+
    "\2\43\2\3\1\0\1\43\10\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\45\3\3\2\0\2\3\1\115\22\3"+
    "\3\0\1\3\2\43\2\3\1\0\1\43\10\0\1\44"+
    "\1\0\2\44\1\0\2\44\1\45\3\3\2\0\2\3"+
    "\1\70\22\3\3\0\1\3\2\43\2\3\1\0\1\43"+
    "\10\0\1\44\1\0\2\44\1\0\2\44\1\45\3\3"+
    "\2\0\11\3\1\116\13\3\3\0\1\3\2\43\2\3"+
    "\1\0\1\43\10\0\1\44\1\0\2\44\1\0\2\44"+
    "\1\45\3\3\2\0\2\3\1\117\22\3\3\0\5\120"+
    "\1\0\1\120\10\0\1\120\1\0\2\120\1\0\2\120"+
    "\1\121\3\120\2\0\25\120\1\0\1\122\1\0\5\43"+
    "\1\0\1\43\17\0\4\43\2\0\25\43\3\0\1\123"+
    "\2\44\2\123\1\0\1\44\10\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\124\3\123\2\0\25\123\3\0\1\3"+
    "\2\43\2\3\1\0\1\43\3\0\1\125\4\0\1\44"+
    "\1\0\2\44\1\0\2\44\1\45\3\3\2\0\25\3"+
    "\4\0\2\126\3\0\1\126\55\0\1\56\2\127\2\56"+
    "\1\0\1\127\10\0\1\56\1\0\2\56\1\0\2\56"+
    "\1\130\3\56\2\0\25\56\2\0\1\46\1\47\2\131"+
    "\2\47\1\46\1\131\10\46\1\47\1\46\2\47\1\51"+
    "\2\47\1\52\3\47\2\46\25\47\1\0\1\46\2\0"+
    "\2\132\3\0\1\132\55\0\1\56\2\127\2\56\1\0"+
    "\1\127\3\0\1\133\4\0\1\56\1\0\2\56\1\0"+
    "\2\56\1\130\3\56\2\0\25\56\3\0\1\56\2\134"+
    "\1\56\1\135\1\0\1\134\10\0\1\56\1\0\2\56"+
    "\1\0\2\56\1\136\1\56\1\135\1\56\2\0\3\56"+
    "\1\135\1\56\1\135\1\56\1\135\4\56\2\135\7\56"+
    "\2\0\1\46\1\47\2\131\2\47\1\46\1\137\10\46"+
    "\1\47\1\46\2\47\1\51\2\47\1\52\3\47\2\46"+
    "\25\47\1\0\1\46\2\0\2\55\3\0\1\55\55\0"+
    "\5\56\1\0\1\56\10\0\1\56\1\0\2\56\1\0"+
    "\2\56\1\130\3\56\2\0\25\56\3\0\5\56\1\0"+
    "\1\56\3\0\1\125\4\0\1\56\1\0\2\56\1\0"+
    "\2\56\1\130\3\56\2\0\25\56\2\0\21\61\1\140"+
    "\42\61\62\62\1\0\1\62\1\0\5\63\1\0\1\63"+
    "\10\0\1\63\1\0\2\63\1\0\1\63\1\141\1\142"+
    "\3\63\2\0\25\63\3\0\1\143\2\64\2\143\1\0"+
    "\1\64\10\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\144\3\143\2\0\25\143\3\0\5\63\1\0\1\63"+
    "\3\0\1\145\4\0\1\63\1\0\2\63\1\0\1\63"+
    "\1\141\1\142\3\63\2\0\25\63\32\0\1\146\34\0"+
    "\1\3\2\43\2\3\1\0\1\43\10\0\1\44\1\0"+
    "\2\44\1\0\2\44\1\45\3\3\2\0\1\3\1\147"+
    "\23\3\3\0\1\3\2\43\2\3\1\0\1\43\10\0"+
    "\1\44\1\0\2\44\1\0\2\44\1\45\3\3\2\0"+
    "\10\3\1\150\2\3\1\151\11\3\3\0\1\3\2\43"+
    "\2\3\1\0\1\43\10\0\1\44\1\0\2\44\1\0"+
    "\2\44\1\45\3\3\2\0\23\3\1\152\1\3\3\0"+
    "\1\3\2\43\2\3\1\0\1\43\10\0\1\44\1\0"+
    "\2\44\1\0\2\44\1\45\3\3\2\0\5\3\1\153"+
    "\17\3\3\0\1\3\2\43\2\3\1\0\1\43\10\0"+
    "\1\44\1\0\2\44\1\0\2\44\1\45\3\3\2\0"+
    "\1\3\1\154\16\3\1\155\4\3\3\0\1\3\2\43"+
    "\2\3\1\0\1\43\10\0\1\44\1\0\2\44\1\0"+
    "\2\44\1\45\3\3\2\0\1\3\1\156\23\3\3\0"+
    "\1\3\2\43\2\3\1\0\1\43\10\0\1\44\1\0"+
    "\2\44\1\0\2\44\1\45\3\3\2\0\1\157\24\3"+
    "\3\0\1\3\2\43\2\3\1\0\1\43\10\0\1\44"+
    "\1\0\2\44\1\0\2\44\1\45\3\3\2\0\10\3"+
    "\1\160\14\3\3\0\1\3\2\43\2\3\1\0\1\43"+
    "\3\0\1\125\4\0\1\44\1\0\2\44\1\0\2\44"+
    "\1\45\3\3\2\0\10\3\1\160\14\3\3\0\1\3"+
    "\2\43\2\3\1\0\1\43\10\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\45\3\3\2\0\12\3\1\161\12\3"+
    "\3\0\1\3\2\43\2\3\1\0\1\43\10\0\1\44"+
    "\1\0\2\44\1\0\2\44\1\162\3\3\2\0\25\3"+
    "\3\0\1\3\2\43\2\3\1\0\1\43\10\0\1\44"+
    "\1\0\2\44\1\0\2\44\1\163\3\3\2\0\4\3"+
    "\1\164\20\3\3\0\1\3\2\43\2\3\1\0\1\43"+
    "\10\0\1\44\1\0\2\44\1\0\2\44\1\45\3\3"+
    "\2\0\2\3\1\165\22\3\3\0\1\3\2\43\2\3"+
    "\1\0\1\43\10\0\1\44\1\0\2\44\1\0\2\44"+
    "\1\45\1\166\2\3\2\0\20\3\1\167\4\3\3\0"+
    "\1\3\2\43\2\3\1\0\1\43\10\0\1\44\1\0"+
    "\2\44\1\0\2\44\1\45\3\3\2\0\13\3\1\170"+
    "\11\3\3\0\1\3\2\43\2\3\1\0\1\43\10\0"+
    "\1\44\1\0\2\44\1\0\2\44\1\45\3\3\2\0"+
    "\1\3\1\110\23\3\3\0\1\3\2\43\2\3\1\0"+
    "\1\43\10\0\1\44\1\0\2\44\1\0\2\44\1\45"+
    "\3\3\2\0\1\171\24\3\3\0\1\3\2\43\2\3"+
    "\1\0\1\43\10\0\1\44\1\0\2\44\1\0\2\44"+
    "\1\45\3\3\2\0\15\3\1\172\7\3\3\0\1\3"+
    "\2\43\2\3\1\0\1\43\10\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\45\3\3\2\0\4\3\1\110\20\3"+
    "\3\0\1\3\2\43\2\3\1\0\1\43\10\0\1\44"+
    "\1\0\2\44\1\0\2\44\1\45\3\3\2\0\2\3"+
    "\1\173\22\3\3\0\1\3\2\43\2\3\1\0\1\43"+
    "\10\0\1\44\1\0\2\44\1\0\2\44\1\45\3\3"+
    "\2\0\12\3\1\174\12\3\3\0\1\3\2\43\2\3"+
    "\1\0\1\43\10\0\1\44\1\0\2\44\1\0\2\44"+
    "\1\45\3\3\2\0\13\3\1\175\11\3\3\0\1\3"+
    "\2\43\2\3\1\0\1\43\10\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\45\3\3\2\0\13\3\1\176\2\3"+
    "\1\177\6\3\3\0\5\120\1\0\1\120\3\0\1\200"+
    "\4\0\1\120\1\0\2\120\1\0\2\120\1\121\3\120"+
    "\2\0\25\120\1\0\1\122\1\0\1\123\2\0\2\123"+
    "\12\0\1\44\1\0\2\44\1\0\2\44\1\124\3\123"+
    "\2\0\25\123\3\0\1\123\2\0\2\123\5\0\1\125"+
    "\4\0\1\44\1\0\2\44\1\0\2\44\1\124\3\123"+
    "\2\0\25\123\32\0\1\201\35\0\2\126\3\0\1\126"+
    "\32\0\1\202\22\0\1\56\2\127\2\56\1\0\1\127"+
    "\10\0\1\56\1\0\2\56\1\0\2\56\1\130\3\56"+
    "\2\0\5\56\1\203\17\56\3\0\5\56\1\0\1\56"+
    "\3\0\1\133\4\0\1\56\1\0\2\56\1\0\2\56"+
    "\1\130\3\56\2\0\25\56\2\0\1\46\1\47\2\131"+
    "\2\47\1\46\1\131\10\46\1\47\1\46\2\47\1\51"+
    "\2\47\1\52\3\47\2\46\5\47\1\204\17\47\1\0"+
    "\1\46\2\0\2\132\3\0\1\132\32\0\1\202\51\0"+
    "\1\205\34\0\1\56\2\134\1\56\1\135\1\0\1\134"+
    "\10\0\1\56\1\0\2\56\1\0\2\56\1\136\1\56"+
    "\1\135\1\56\2\0\3\56\1\135\1\56\1\206\1\56"+
    "\1\135\4\56\2\135\7\56\3\0\1\56\2\135\1\56"+
    "\1\135\1\0\1\135\10\0\1\56\1\0\2\56\1\0"+
    "\2\56\1\136\1\56\1\135\1\56\2\0\3\56\1\135"+
    "\1\56\1\135\1\56\1\135\4\56\2\135\7\56\3\0"+
    "\1\56\2\135\1\56\1\135\1\0\1\135\3\0\1\133"+
    "\4\0\1\56\1\0\2\56\1\0\2\56\1\136\1\56"+
    "\1\135\1\56\2\0\3\56\1\135\1\56\1\135\1\56"+
    "\1\135\4\56\2\135\7\56\2\0\1\46\1\47\2\131"+
    "\2\47\1\46\1\137\10\46\1\47\1\46\2\47\1\51"+
    "\2\47\1\52\3\47\2\46\5\47\1\204\17\47\1\0"+
    "\1\46\21\61\1\140\1\207\41\61\1\0\5\63\1\0"+
    "\1\63\3\0\1\210\4\0\1\63\1\0\2\63\1\0"+
    "\1\63\1\141\1\142\3\63\2\0\25\63\3\0\1\143"+
    "\2\211\2\143\1\0\1\211\10\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\144\3\143\2\0\25\143\3\0"+
    "\1\143\2\211\2\143\1\0\1\211\3\0\1\145\4\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\144\3\143"+
    "\2\0\25\143\32\0\1\212\64\0\1\213\33\0\1\3"+
    "\2\43\2\3\1\0\1\43\10\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\45\3\3\2\0\2\3\1\110\22\3"+
    "\3\0\1\3\2\43\2\3\1\0\1\43\10\0\1\44"+
    "\1\0\2\44\1\0\2\44\1\45\3\3\2\0\13\3"+
    "\1\214\11\3\3\0\1\3\2\43\2\3\1\0\1\43"+
    "\10\0\1\44\1\0\2\44\1\0\2\44\1\45\3\3"+
    "\2\0\2\3\1\215\22\3\3\0\1\3\2\43\2\3"+
    "\1\0\1\43\10\0\1\44\1\0\2\44\1\0\2\44"+
    "\1\45\3\3\2\0\5\3\1\216\17\3\3\0\1\3"+
    "\2\43\2\3\1\0\1\43\10\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\217\3\3\2\0\25\3\3\0\1\3"+
    "\2\43\2\3\1\0\1\43\10\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\45\3\3\2\0\1\220\24\3\3\0"+
    "\1\3\2\43\2\3\1\0\1\43\10\0\1\44\1\0"+
    "\2\44\1\0\2\44\1\45\3\3\2\0\13\3\1\221"+
    "\11\3\3\0\1\3\2\43\2\3\1\0\1\43\10\0"+
    "\1\44\1\0\2\44\1\0\2\44\1\45\3\3\2\0"+
    "\5\3\1\220\17\3\3\0\1\3\2\43\2\3\1\0"+
    "\1\43\10\0\1\44\1\0\2\44\1\0\2\44\1\45"+
    "\3\3\2\0\17\3\1\110\5\3\3\0\1\3\2\43"+
    "\2\3\1\0\1\43\10\0\1\44\1\0\2\44\1\0"+
    "\2\44\1\45\3\3\2\0\5\3\1\110\17\3\3\0"+
    "\1\3\2\43\2\3\1\0\1\43\10\0\1\44\1\0"+
    "\2\44\1\0\2\44\1\45\3\3\2\0\1\3\1\222"+
    "\6\3\1\107\14\3\3\0\1\3\2\43\2\3\1\0"+
    "\1\43\3\0\1\125\4\0\1\44\1\0\2\44\1\0"+
    "\2\44\1\45\3\3\2\0\4\3\1\110\20\3\3\0"+
    "\1\3\2\43\2\3\1\0\1\43\3\0\1\125\4\0"+
    "\1\44\1\0\2\44\1\0\2\44\1\45\3\3\2\0"+
    "\1\3\1\223\23\3\3\0\1\3\2\43\2\3\1\0"+
    "\1\43\10\0\1\44\1\0\2\44\1\0\2\44\1\45"+
    "\3\3\2\0\1\224\24\3\3\0\1\3\2\43\2\3"+
    "\1\0\1\43\10\0\1\44\1\0\2\44\1\0\2\44"+
    "\1\45\3\3\2\0\4\3\1\107\20\3\3\0\1\3"+
    "\2\43\2\3\1\0\1\43\10\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\45\3\3\2\0\5\3\1\225\17\3"+
    "\3\0\1\3\2\43\2\3\1\0\1\43\10\0\1\44"+
    "\1\0\2\44\1\0\2\44\1\45\3\3\2\0\12\3"+
    "\1\226\12\3\3\0\1\3\2\43\2\3\1\0\1\43"+
    "\10\0\1\44\1\0\2\44\1\0\2\44\1\45\3\3"+
    "\2\0\1\3\1\227\23\3\3\0\1\3\2\43\2\3"+
    "\1\0\1\43\10\0\1\44\1\0\2\44\1\0\2\44"+
    "\1\45\3\3\2\0\3\3\1\175\21\3\3\0\1\3"+
    "\2\43\2\3\1\0\1\43\10\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\230\3\3\2\0\25\3\3\0\1\3"+
    "\2\43\2\3\1\0\1\43\10\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\231\3\3\2\0\25\3\3\0\1\3"+
    "\2\43\2\3\1\0\1\43\10\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\45\3\3\2\0\20\3\1\110\4\3"+
    "\3\0\1\3\2\43\2\3\1\0\1\43\10\0\1\44"+
    "\1\0\2\44\1\0\2\44\1\45\3\3\2\0\16\3"+
    "\1\160\6\3\3\0\1\3\2\43\2\3\1\0\1\43"+
    "\10\0\1\44\1\0\2\44\1\0\2\44\1\45\3\3"+
    "\2\0\14\3\1\110\10\3\3\0\1\3\2\43\2\3"+
    "\1\0\1\43\10\0\1\44\1\0\2\44\1\0\2\44"+
    "\1\232\3\3\2\0\25\3\32\0\1\233\64\0\1\234"+
    "\34\0\2\235\3\0\1\235\3\0\1\236\51\0\1\56"+
    "\2\237\2\56\1\0\1\237\3\0\1\236\4\0\1\56"+
    "\1\0\2\56\1\0\2\56\1\130\3\56\2\0\25\56"+
    "\3\0\1\56\2\240\2\56\1\0\1\240\3\0\1\236"+
    "\4\0\1\56\1\0\2\56\1\0\2\56\1\130\3\56"+
    "\2\0\25\56\33\0\1\241\33\0\1\56\2\242\1\56"+
    "\1\135\1\0\1\242\3\0\1\236\4\0\1\56\1\0"+
    "\2\56\1\0\2\56\1\136\1\56\1\135\1\56\2\0"+
    "\3\56\1\135\1\56\1\135\1\56\1\135\4\56\2\135"+
    "\7\56\32\0\1\243\34\0\5\211\1\0\1\211\10\0"+
    "\1\211\1\0\2\211\1\0\1\211\1\244\1\245\3\211"+
    "\2\0\25\211\33\0\1\246\45\0\1\247\51\0\1\3"+
    "\2\43\2\3\1\0\1\43\10\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\45\3\3\2\0\20\3\1\167\4\3"+
    "\3\0\1\3\2\43\2\3\1\0\1\43\10\0\1\44"+
    "\1\0\2\44\1\0\2\44\1\45\3\3\2\0\12\3"+
    "\1\110\12\3\3\0\1\3\2\43\2\3\1\0\1\43"+
    "\10\0\1\44\1\0\2\44\1\0\2\44\1\45\3\3"+
    "\2\0\14\3\1\250\10\3\3\0\1\3\2\43\2\3"+
    "\1\0\1\43\3\0\1\125\4\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\45\3\3\2\0\6\3\1\110\16\3"+
    "\3\0\1\3\2\43\2\3\1\0\1\43\10\0\1\44"+
    "\1\0\2\44\1\0\2\44\1\45\3\3\2\0\4\3"+
    "\1\215\20\3\3\0\1\3\2\43\2\3\1\0\1\43"+
    "\10\0\1\44\1\0\2\44\1\0\2\44\1\45\3\3"+
    "\2\0\10\3\1\251\14\3\3\0\1\3\2\43\2\3"+
    "\1\0\1\43\10\0\1\44\1\0\2\44\1\0\2\44"+
    "\1\45\3\3\2\0\13\3\1\252\11\3\3\0\1\3"+
    "\2\43\2\3\1\0\1\43\10\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\45\3\3\2\0\13\3\1\253\11\3"+
    "\3\0\1\3\2\43\2\3\1\0\1\43\10\0\1\44"+
    "\1\0\2\44\1\0\2\44\1\45\3\3\2\0\7\3"+
    "\1\107\15\3\3\0\1\3\2\43\2\3\1\0\1\43"+
    "\10\0\1\44\1\0\2\44\1\0\2\44\1\45\3\3"+
    "\2\0\2\3\1\254\22\3\3\0\1\3\2\43\2\3"+
    "\1\0\1\43\10\0\1\44\1\0\2\44\1\0\2\44"+
    "\1\45\3\3\2\0\5\3\1\176\17\3\3\0\1\3"+
    "\2\43\2\3\1\0\1\43\10\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\45\3\3\2\0\7\3\1\255\15\3"+
    "\3\0\1\3\2\43\2\3\1\0\1\43\3\0\1\125"+
    "\4\0\1\44\1\0\2\44\1\0\2\44\1\45\3\3"+
    "\2\0\1\256\24\3\3\0\1\3\2\43\2\3\1\0"+
    "\1\43\3\0\1\125\4\0\1\44\1\0\2\44\1\0"+
    "\2\44\1\45\3\3\2\0\1\3\1\110\23\3\3\0"+
    "\1\3\2\43\2\3\1\0\1\43\3\0\1\125\4\0"+
    "\1\44\1\0\2\44\1\0\2\44\1\45\3\3\2\0"+
    "\1\3\1\116\23\3\33\0\1\257\45\0\1\260\52\0"+
    "\2\235\3\0\1\235\55\0\1\56\2\237\2\56\1\0"+
    "\1\237\10\0\1\56\1\0\2\56\1\0\2\56\1\130"+
    "\3\56\2\0\25\56\3\0\1\56\2\240\2\56\1\0"+
    "\1\240\10\0\1\56\1\0\2\56\1\0\2\56\1\130"+
    "\3\56\2\0\5\56\1\203\17\56\15\0\1\261\51\0"+
    "\1\56\2\242\1\56\1\135\1\0\1\242\10\0\1\56"+
    "\1\0\2\56\1\0\2\56\1\136\1\56\1\135\1\56"+
    "\2\0\3\56\1\135\1\56\1\135\1\56\1\135\4\56"+
    "\2\135\7\56\33\0\1\262\33\0\5\211\1\0\1\211"+
    "\3\0\1\263\4\0\1\211\1\0\2\211\1\0\1\211"+
    "\1\244\1\245\3\211\2\0\25\211\15\0\1\264\102\0"+
    "\1\265\32\0\1\3\2\43\2\3\1\0\1\43\10\0"+
    "\1\44\1\0\2\44\1\0\2\44\1\45\3\3\2\0"+
    "\5\3\1\254\17\3\3\0\1\3\2\43\2\3\1\0"+
    "\1\43\10\0\1\44\1\0\2\44\1\0\2\44\1\45"+
    "\3\3\2\0\1\3\1\266\23\3\3\0\1\3\2\43"+
    "\2\3\1\0\1\43\10\0\1\44\1\0\2\44\1\0"+
    "\2\44\1\45\3\3\2\0\12\3\1\267\12\3\3\0"+
    "\1\3\2\43\2\3\1\0\1\43\10\0\1\44\1\0"+
    "\2\44\1\0\2\44\1\45\3\3\2\0\7\3\1\110"+
    "\15\3\3\0\1\3\2\43\2\3\1\0\1\43\10\0"+
    "\1\44\1\0\2\44\1\0\2\44\1\45\3\3\2\0"+
    "\15\3\1\110\7\3\3\0\1\3\2\43\2\3\1\0"+
    "\1\43\10\0\1\44\1\0\2\44\1\0\2\44\1\45"+
    "\3\3\2\0\11\3\1\110\13\3\3\0\1\3\2\43"+
    "\2\3\1\0\1\43\10\0\1\44\1\0\2\44\1\0"+
    "\2\44\1\45\3\3\2\0\16\3\1\107\6\3\15\0"+
    "\1\270\102\0\1\271\63\0\1\272\44\0\1\273\100\0"+
    "\1\274\65\0\1\275\64\0\1\276\31\0\1\3\2\43"+
    "\2\3\1\0\1\43\10\0\1\44\1\0\2\44\1\0"+
    "\2\44\1\45\3\3\2\0\5\3\1\113\17\3\3\0"+
    "\1\3\2\43\2\3\1\0\1\43\10\0\1\44\1\0"+
    "\2\44\1\0\2\44\1\45\3\3\2\0\1\160\24\3"+
    "\34\0\1\277\64\0\1\300\63\0\1\301\62\0\1\302"+
    "\62\0\1\303\65\0\1\304\43\0\1\305\103\0\1\306"+
    "\43\0\1\307\63\0\1\310\103\0\1\311\43\0\1\312"+
    "\63\0\1\313\104\0\1\21\42\0\1\314\104\0\1\44"+
    "\63\0\1\56\42\0\1\315\102\0\1\316\65\0\1\64"+
    "\63\0\1\120\63\0\1\63\62\0\1\317\43\0\1\320"+
    "\104\0\1\211\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10296];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\5\1\1\11\35\1\1\0\2\1\1\0"+
    "\7\1\1\0\5\1\1\0\30\1\2\0\1\11\2\1"+
    "\2\0\4\1\1\0\4\1\1\0\4\1\2\0\31\1"+
    "\3\0\2\1\1\0\1\1\1\11\4\0\17\1\2\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\1\1\3\0"+
    "\7\1\7\0\2\1\31\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public Integer row;
    public Integer column;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TipoToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return Keyword;
          }
        case 14: break;
        case 8: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return LiteralString;
          }
        case 15: break;
        case 1: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return Error;
          }
        case 16: break;
        case 5: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return Operator;
          }
        case 17: break;
        case 12: 
          { /* Ignore */
          }
        case 18: break;
        case 3: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return Identifier;
          }
        case 19: break;
        case 11: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return HexadecimalNumber;
          }
        case 20: break;
        case 13: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return PointFloatingNumber;
          }
        case 21: break;
        case 7: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return OctalNumber;
          }
        case 22: break;
        case 2: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return ERROR;
          }
        case 23: break;
        case 10: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return FloatNumber;
          }
        case 24: break;
        case 6: 
          { /*Ignore*/
          }
        case 25: break;
        case 4: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return Number;
          }
        case 26: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
