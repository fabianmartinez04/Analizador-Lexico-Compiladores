/* The following code was generated by JFlex 1.4.3 on 4/16/21, 10:11 PM */

package codigo;
import static codigo.TipoToken.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/16/21, 10:11 PM from the specification file
 * <tt>D:/Desktop/CI/Proyectos/Etapa 1/Analizador-Lexico-Compiladores/AnalizadorLexico/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\5\2\0\1\5\22\0\1\5\1\46\3\0\1\46"+
    "\1\47\1\0\1\41\1\41\1\46\1\42\1\5\1\40\1\41\1\6"+
    "\1\2\1\2\6\2\2\2\1\41\1\41\1\45\1\43\1\44\1\41"+
    "\1\0\6\1\14\1\1\37\3\1\1\36\3\1\1\41\1\0\1\41"+
    "\1\46\1\1\1\0\1\7\1\13\1\17\1\24\1\15\1\25\1\30"+
    "\1\21\1\23\1\1\1\16\1\26\1\27\1\22\1\12\1\34\1\1"+
    "\1\14\1\20\1\11\1\10\1\35\1\32\1\3\1\33\1\31\1\41"+
    "\1\4\1\41\1\41\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\3\17\1\7\3"+
    "\2\0\1\4\17\0\2\5\106\0\1\6\1\0\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370\0\50"+
    "\0\u0398\0\u03c0\0\u03e8\0\u0410\0\u0438\0\120\0\u0460\0\50"+
    "\0\u0488\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0"+
    "\0\u05c8\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8\0\120"+
    "\0\u06e0\0\u0708\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u07f8"+
    "\0\u0820\0\u0848\0\u0870\0\u0898\0\u08c0\0\u08e8\0\u0910\0\u0938"+
    "\0\u0960\0\u0988\0\u09b0\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78"+
    "\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8"+
    "\0\u0be0\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8"+
    "\0\u0d20\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38"+
    "\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28\0\u0f50\0\u0f78"+
    "\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\u1068\0\u1090\0\u10b8"+
    "\0\u10e0\0\u1108\0\u1130\0\u1158\0\u1180\0\u11a8\0\u11d0\0\u11a8"+
    "\0\u11f8\0\u11f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\3\1\13\1\14\1\15\1\3\1\16"+
    "\1\17\2\3\1\20\1\21\1\22\1\23\1\3\1\24"+
    "\1\3\1\25\2\3\1\26\2\3\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\32\1\35\51\0\3\36\3\0"+
    "\27\36\1\37\1\36\12\0\1\4\51\0\1\30\36\0"+
    "\1\30\11\0\1\6\50\0\1\40\34\0\1\30\5\0"+
    "\3\36\3\0\1\36\1\41\25\36\1\37\1\36\11\0"+
    "\3\36\3\0\13\36\1\42\13\36\1\37\1\36\11\0"+
    "\3\36\3\0\24\36\1\43\2\36\1\37\1\36\11\0"+
    "\3\36\3\0\5\36\1\44\21\36\1\37\1\36\11\0"+
    "\3\36\3\0\6\36\1\45\20\36\1\37\1\36\11\0"+
    "\2\36\1\46\3\0\13\36\1\47\3\36\1\50\7\36"+
    "\1\37\1\36\11\0\3\36\3\0\1\50\2\36\1\51"+
    "\6\36\1\52\14\36\1\37\1\36\11\0\3\36\3\0"+
    "\2\36\1\53\7\36\1\54\1\36\1\55\6\36\1\56"+
    "\3\36\1\37\1\36\11\0\3\36\3\0\13\36\1\57"+
    "\2\36\1\60\10\36\1\37\1\36\11\0\3\36\3\0"+
    "\3\36\1\61\2\36\1\62\20\36\1\37\1\36\11\0"+
    "\3\36\3\0\3\36\1\63\13\36\1\64\7\36\1\37"+
    "\1\36\11\0\3\36\3\0\3\36\1\65\23\36\1\37"+
    "\1\36\11\0\3\36\3\0\3\36\1\41\23\36\1\37"+
    "\1\36\11\0\3\36\3\0\12\36\1\66\14\36\1\37"+
    "\1\36\11\0\3\36\3\0\3\36\1\67\23\36\1\37"+
    "\1\36\12\0\1\70\35\0\1\30\2\0\2\30\45\0"+
    "\2\30\47\0\1\30\47\0\1\30\1\32\46\0\1\30"+
    "\1\0\1\32\45\0\1\30\3\0\1\30\1\0\3\36"+
    "\3\0\12\36\1\71\14\36\1\37\1\36\11\0\3\36"+
    "\3\0\2\36\1\72\24\36\1\37\1\36\11\0\3\36"+
    "\3\0\11\36\1\73\2\36\1\74\12\36\1\37\1\36"+
    "\11\0\3\36\3\0\25\36\1\75\1\36\1\37\1\36"+
    "\11\0\3\36\3\0\6\36\1\76\20\36\1\37\1\36"+
    "\11\0\3\36\3\0\2\36\1\77\16\36\1\100\5\36"+
    "\1\37\1\36\11\0\3\36\3\0\2\36\1\101\24\36"+
    "\1\37\1\36\11\0\3\36\3\0\1\36\1\102\25\36"+
    "\1\37\1\36\11\0\3\36\3\0\11\36\1\103\15\36"+
    "\1\37\1\36\11\0\3\36\3\0\13\36\1\104\13\36"+
    "\1\37\1\36\11\0\3\36\3\0\1\63\26\36\1\37"+
    "\1\36\11\0\3\36\3\0\1\105\4\36\1\106\21\36"+
    "\1\37\1\36\11\0\3\36\3\0\3\36\1\107\23\36"+
    "\1\37\1\36\11\0\3\36\3\0\21\36\1\110\1\111"+
    "\4\36\1\37\1\36\11\0\3\36\3\0\14\36\1\112"+
    "\12\36\1\37\1\36\11\0\3\36\3\0\2\36\1\60"+
    "\24\36\1\37\1\36\11\0\3\36\3\0\1\36\1\113"+
    "\25\36\1\37\1\36\11\0\3\36\3\0\16\36\1\114"+
    "\10\36\1\37\1\36\11\0\3\36\3\0\5\36\1\60"+
    "\21\36\1\37\1\36\11\0\3\36\3\0\3\36\1\115"+
    "\23\36\1\37\1\36\11\0\3\36\3\0\13\36\1\116"+
    "\13\36\1\37\1\36\11\0\3\36\3\0\14\36\1\117"+
    "\12\36\1\37\1\36\11\0\3\36\3\0\14\36\1\120"+
    "\2\36\1\121\7\36\1\37\1\36\12\0\1\70\33\0"+
    "\1\122\12\0\3\36\3\0\14\36\1\123\12\36\1\37"+
    "\1\36\11\0\3\36\3\0\3\36\1\60\23\36\1\37"+
    "\1\36\11\0\3\36\3\0\14\36\1\124\12\36\1\37"+
    "\1\36\11\0\3\36\3\0\3\36\1\125\23\36\1\37"+
    "\1\36\11\0\3\36\3\0\6\36\1\126\20\36\1\37"+
    "\1\36\11\0\3\36\3\0\1\127\26\36\1\37\1\36"+
    "\11\0\3\36\3\0\1\36\1\130\25\36\1\37\1\36"+
    "\11\0\3\36\3\0\14\36\1\131\12\36\1\37\1\36"+
    "\11\0\3\36\3\0\6\36\1\130\20\36\1\37\1\36"+
    "\11\0\3\36\3\0\20\36\1\60\6\36\1\37\1\36"+
    "\11\0\3\36\3\0\6\36\1\60\20\36\1\37\1\36"+
    "\11\0\3\36\3\0\2\36\1\132\6\36\1\57\15\36"+
    "\1\37\1\36\11\0\3\36\3\0\2\36\1\133\24\36"+
    "\1\37\1\36\11\0\3\36\3\0\1\36\1\134\25\36"+
    "\1\37\1\36\11\0\3\36\3\0\5\36\1\57\21\36"+
    "\1\37\1\36\11\0\3\36\3\0\13\36\1\135\13\36"+
    "\1\37\1\36\11\0\3\36\3\0\6\36\1\136\20\36"+
    "\1\37\1\36\11\0\3\36\3\0\2\36\1\137\24\36"+
    "\1\37\1\36\11\0\3\36\3\0\4\36\1\117\22\36"+
    "\1\37\1\36\11\0\3\36\3\0\1\140\26\36\1\37"+
    "\1\36\11\0\3\36\3\0\1\57\26\36\1\37\1\36"+
    "\11\0\3\36\3\0\21\36\1\60\5\36\1\37\1\36"+
    "\11\0\3\36\3\0\17\36\1\103\7\36\1\37\1\36"+
    "\11\0\3\36\3\0\15\36\1\60\11\36\1\37\1\36"+
    "\11\0\3\36\3\0\1\141\26\36\1\37\1\36\31\0"+
    "\1\142\27\0\3\36\3\0\2\36\1\143\24\36\1\37"+
    "\1\36\11\0\3\36\3\0\21\36\1\110\5\36\1\37"+
    "\1\36\11\0\3\36\3\0\13\36\1\60\13\36\1\37"+
    "\1\36\11\0\3\36\3\0\15\36\1\144\11\36\1\37"+
    "\1\36\11\0\3\36\3\0\7\36\1\60\17\36\1\37"+
    "\1\36\11\0\3\36\3\0\5\36\1\125\21\36\1\37"+
    "\1\36\11\0\3\36\3\0\11\36\1\145\15\36\1\37"+
    "\1\36\11\0\3\36\3\0\14\36\1\146\12\36\1\37"+
    "\1\36\11\0\3\36\3\0\14\36\1\147\12\36\1\37"+
    "\1\36\11\0\3\36\3\0\10\36\1\57\16\36\1\37"+
    "\1\36\11\0\3\36\3\0\6\36\1\120\20\36\1\37"+
    "\1\36\11\0\3\36\3\0\3\36\1\150\23\36\1\37"+
    "\1\36\11\0\3\36\3\0\10\36\1\151\16\36\1\37"+
    "\1\36\11\0\3\36\3\0\1\36\1\152\25\36\1\37"+
    "\1\36\11\0\3\36\3\0\2\36\1\66\24\36\1\37"+
    "\1\36\33\0\1\153\25\0\3\36\3\0\6\36\1\154"+
    "\20\36\1\37\1\36\11\0\3\36\3\0\6\36\1\150"+
    "\20\36\1\37\1\36\11\0\3\36\3\0\2\36\1\155"+
    "\24\36\1\37\1\36\11\0\3\36\3\0\13\36\1\156"+
    "\13\36\1\37\1\36\11\0\3\36\3\0\10\36\1\60"+
    "\16\36\1\37\1\36\11\0\3\36\3\0\16\36\1\60"+
    "\10\36\1\37\1\36\11\0\3\36\3\0\12\36\1\60"+
    "\14\36\1\37\1\36\11\0\3\36\3\0\17\36\1\57"+
    "\7\36\1\37\1\36\21\0\1\157\37\0\3\36\3\0"+
    "\27\36\1\37\1\160\11\0\3\36\3\0\6\36\1\63"+
    "\20\36\1\37\1\36\11\0\3\36\3\0\1\36\1\103"+
    "\25\36\1\37\1\36\25\0\1\161\33\0\3\36\3\0"+
    "\25\36\1\162\1\36\1\37\1\36\47\0\1\163\11\0"+
    "\3\36\3\0\1\164\26\36\1\37\1\36\44\0\1\165"+
    "\14\0\3\36\3\0\10\36\1\166\16\36\1\37\1\36"+
    "\17\0\1\167\41\0\3\36\3\0\6\36\1\170\20\36"+
    "\1\37\1\36\27\0\1\171\45\0\1\172\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\1\11\5\1\2\0\1\11\17\0"+
    "\2\1\106\0\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public Integer row;
    public Integer column;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TipoToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { /*Ignore*/
          }
        case 7: break;
        case 6: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return Identifier;
          }
        case 8: break;
        case 2: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return Number;
          }
        case 9: break;
        case 1: 
          { return ERROR;
          }
        case 10: break;
        case 5: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return Keyword;
          }
        case 11: break;
        case 3: 
          { lexeme = yytext(); row = yyline; column = yycolumn; return Operator;
          }
        case 12: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
